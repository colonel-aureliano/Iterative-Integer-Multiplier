$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module top $end
  $var wire  1 } clk $end
  $var wire  1 ~ linetrace $end
  $scope module top $end
   $var wire  4 2 alu_fn_X [3:0] $end
   $var wire  1 E br_cond_eq_X $end
   $var wire  1 &! br_cond_lt_X $end
   $var wire  1 '! br_cond_ltu_X $end
   $var wire  1 } clk $end
   $var wire 32 ; core_id [31:0] $end
   $var wire  2 . csrr_sel_D [1:0] $end
   $var wire 32 > dmem_reqstream_msg_addr [31:0] $end
   $var wire 32 #! dmem_reqstream_msg_data [31:0] $end
   $var wire 32 & dmem_respstream_msg_data [31:0] $end
   $var wire  2 3 ex_result_sel_X [1:0] $end
   $var wire 32 = imem_reqstream_msg_addr [31:0] $end
   $var wire  1 ( imem_respstream_drop $end
   $var wire 47 $ imem_respstream_msg [46:0] $end
   $var wire  3 / imm_type_D [2:0] $end
   $var wire  1 $! imul_istream_rdy_D $end
   $var wire  1 0 imul_istream_val_D $end
   $var wire  1 4 imul_ostream_rdy_X $end
   $var wire  1 %! imul_ostream_val_X $end
   $var wire 32 D inst_D [31:0] $end
   $var wire  1 ~ linetrace $end
   $var wire 32 ' mngr2proc_data [31:0] $end
   $var wire  1 , op1_sel_D $end
   $var wire  2 - op2_sel_D [1:0] $end
   $var wire  2 * pc_sel_F [1:0] $end
   $var wire 32 C proc2mngr_data [31:0] $end
   $var wire  1 + reg_en_D $end
   $var wire  1 ) reg_en_F $end
   $var wire  1 5 reg_en_M $end
   $var wire  1 7 reg_en_W $end
   $var wire  1 1 reg_en_X $end
   $var wire  1 # reset $end
   $var wire  5 8 rf_waddr_W [4:0] $end
   $var wire  1 9 rf_wen_W $end
   $var wire  1 F stats_en $end
   $var wire  1 : stats_en_wen_W $end
   $var wire  1 6 wb_result_sel_M $end
   $scope module DUT $end
    $var wire  4 2 alu_fn_X [3:0] $end
    $var wire 32 > alu_result_X [31:0] $end
    $var wire  1 E br_cond_eq_X $end
    $var wire 32 I br_target_X [31:0] $end
    $var wire 32 *! c_reset_inst [31:0] $end
    $var wire 32 )! c_reset_vector [31:0] $end
    $var wire  1 } clk $end
    $var wire 32 ; core_id [31:0] $end
    $var wire 32 !! csrr_data_D [31:0] $end
    $var wire  2 . csrr_sel_D [1:0] $end
    $var wire 32 > dmem_reqstream_msg_addr [31:0] $end
    $var wire 32 & dmem_respstream_msg_data [31:0] $end
    $var wire 32 & dmem_result_M [31:0] $end
    $var wire 32 T ex_result_M [31:0] $end
    $var wire 32 > ex_result_X [31:0] $end
    $var wire 32 = imem_reqstream_msg_addr [31:0] $end
    $var wire  1 ( imem_respstream_drop $end
    $var wire 47 $ imem_respstream_msg [46:0] $end
    $var wire 32 @ imm_D [31:0] $end
    $var wire  3 / imm_type_D [2:0] $end
    $var wire 32 D inst_D [31:0] $end
    $var wire  5 K inst_rd_D [4:0] $end
    $var wire  5 L inst_rs1_D [4:0] $end
    $var wire  5 M inst_rs2_D [4:0] $end
    $var wire 32 ? jal_target_D [31:0] $end
    $var wire 32 ' mngr2proc_data [31:0] $end
    $var wire 32 (! num_cores [31:0] $end
    $var wire 32 R op1_X [31:0] $end
    $var wire 32 A op2_D [31:0] $end
    $var wire 32 S op2_X [31:0] $end
    $var wire  2 - op2_sel_D [1:0] $end
    $var wire 32 (! p_num_cores [31:0] $end
    $var wire 32 J pc_D [31:0] $end
    $var wire 32 G pc_F [31:0] $end
    $var wire 32 P pc_X [31:0] $end
    $var wire 32 = pc_next_F [31:0] $end
    $var wire 32 H pc_plus4_F [31:0] $end
    $var wire 32 Q pc_plus4_X [31:0] $end
    $var wire  2 * pc_sel_F [1:0] $end
    $var wire 32 C proc2mngr_data [31:0] $end
    $var wire  1 + reg_en_D $end
    $var wire  1 ) reg_en_F $end
    $var wire  1 5 reg_en_M $end
    $var wire  1 7 reg_en_W $end
    $var wire  1 1 reg_en_X $end
    $var wire  1 # reset $end
    $var wire 32 N rf_rdata0_D [31:0] $end
    $var wire 32 O rf_rdata1_D [31:0] $end
    $var wire  5 8 rf_waddr_W [4:0] $end
    $var wire 32 C rf_wdata_W [31:0] $end
    $var wire  1 9 rf_wen_W $end
    $var wire  1 F stats_en $end
    $var wire 32 U stats_en_W [31:0] $end
    $var wire  1 : stats_en_wen_W $end
    $var wire 32 B wb_result_M [31:0] $end
    $var wire 32 C wb_result_W [31:0] $end
    $var wire  1 6 wb_result_sel_M $end
    $scope module alu $end
     $var wire  4 2 fn [3:0] $end
     $var wire 32 R in0 [31:0] $end
     $var wire 32 S in1 [31:0] $end
     $var wire  1 E ops_eq $end
     $var wire  1 V ops_lt $end
     $var wire  1 W ops_ltu $end
     $var wire 32 > out [31:0] $end
     $scope module cond_eq_comp $end
      $var wire 32 R in0 [31:0] $end
      $var wire 32 S in1 [31:0] $end
      $var wire  1 E out $end
      $var wire 32 +! p_nbits [31:0] $end
     $upscope $end
    $upscope $end
    $scope module br_target_reg_X $end
     $var wire  1 } clk $end
     $var wire 32 ? d [31:0] $end
     $var wire  1 1 en $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire 32 *! p_reset_value [31:0] $end
     $var wire 32 I q [31:0] $end
     $var wire  1 # reset $end
    $upscope $end
    $scope module csrr_sel_mux_D $end
     $var wire 32 ' in0 [31:0] $end
     $var wire 32 (! in1 [31:0] $end
     $var wire 32 ; in2 [31:0] $end
     $var wire 32 !! out [31:0] $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire  2 . sel [1:0] $end
    $upscope $end
    $scope module ex_result_reg_M $end
     $var wire  1 } clk $end
     $var wire 32 > d [31:0] $end
     $var wire  1 5 en $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire 32 *! p_reset_value [31:0] $end
     $var wire 32 T q [31:0] $end
     $var wire  1 # reset $end
    $upscope $end
    $scope module imm_gen_D $end
     $var wire 32 @ imm [31:0] $end
     $var wire  3 / imm_type [2:0] $end
     $var wire 32 D inst [31:0] $end
    $upscope $end
    $scope module inst_D_reg $end
     $var wire  1 } clk $end
     $var wire 32 < d [31:0] $end
     $var wire  1 + en $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire 32 *! p_reset_value [31:0] $end
     $var wire 32 D q [31:0] $end
     $var wire  1 # reset $end
    $upscope $end
    $scope module inst_unpack $end
     $var wire 12 Z csr [11:0] $end
     $var wire  3 Y funct3 [2:0] $end
     $var wire  7 ,! funct7 [6:0] $end
     $var wire 32 D inst [31:0] $end
     $var wire  7 X opcode [6:0] $end
     $var wire  5 K rd [4:0] $end
     $var wire  5 L rs1 [4:0] $end
     $var wire  5 M rs2 [4:0] $end
    $upscope $end
    $scope module op1_reg_X $end
     $var wire  1 } clk $end
     $var wire 32 N d [31:0] $end
     $var wire  1 1 en $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire 32 *! p_reset_value [31:0] $end
     $var wire 32 R q [31:0] $end
     $var wire  1 # reset $end
    $upscope $end
    $scope module op2_reg_X $end
     $var wire  1 } clk $end
     $var wire 32 A d [31:0] $end
     $var wire  1 1 en $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire 32 *! p_reset_value [31:0] $end
     $var wire 32 S q [31:0] $end
     $var wire  1 # reset $end
    $upscope $end
    $scope module op2_sel_mux_D $end
     $var wire 32 O in0 [31:0] $end
     $var wire 32 @ in1 [31:0] $end
     $var wire 32 !! in2 [31:0] $end
     $var wire 32 A out [31:0] $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire  2 - sel [1:0] $end
    $upscope $end
    $scope module pc_incr_F $end
     $var wire 32 G in [31:0] $end
     $var wire 32 H out [31:0] $end
     $var wire 32 -! p_inc_value [31:0] $end
     $var wire 32 +! p_nbits [31:0] $end
    $upscope $end
    $scope module pc_incr_X $end
     $var wire 32 P in [31:0] $end
     $var wire 32 Q out [31:0] $end
     $var wire 32 -! p_inc_value [31:0] $end
     $var wire 32 +! p_nbits [31:0] $end
    $upscope $end
    $scope module pc_plus_imm_D $end
     $var wire  1 .! cin $end
     $var wire  1 "! cout $end
     $var wire 32 J in0 [31:0] $end
     $var wire 32 @ in1 [31:0] $end
     $var wire 32 ? out [31:0] $end
     $var wire 32 +! p_nbits [31:0] $end
    $upscope $end
    $scope module pc_reg_D $end
     $var wire  1 } clk $end
     $var wire 32 G d [31:0] $end
     $var wire  1 + en $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire 32 *! p_reset_value [31:0] $end
     $var wire 32 J q [31:0] $end
     $var wire  1 # reset $end
    $upscope $end
    $scope module pc_reg_F $end
     $var wire  1 } clk $end
     $var wire 32 = d [31:0] $end
     $var wire  1 ) en $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire 32 /! p_reset_value [31:0] $end
     $var wire 32 G q [31:0] $end
     $var wire  1 # reset $end
    $upscope $end
    $scope module pc_reg_X $end
     $var wire  1 } clk $end
     $var wire 32 J d [31:0] $end
     $var wire  1 1 en $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire 32 *! p_reset_value [31:0] $end
     $var wire 32 P q [31:0] $end
     $var wire  1 # reset $end
    $upscope $end
    $scope module pc_sel_mux_F $end
     $var wire 32 H in0 [31:0] $end
     $var wire 32 I in1 [31:0] $end
     $var wire 32 ? in2 [31:0] $end
     $var wire 32 = out [31:0] $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire  2 * sel [1:0] $end
    $upscope $end
    $scope module rf $end
     $var wire  1 } clk $end
     $var wire  5 L rd_addr0 [4:0] $end
     $var wire  5 M rd_addr1 [4:0] $end
     $var wire 32 N rd_data0 [31:0] $end
     $var wire 32 O rd_data1 [31:0] $end
     $var wire  1 # reset $end
     $var wire 32 [ rf_read_data0 [31:0] $end
     $var wire 32 \ rf_read_data1 [31:0] $end
     $var wire  5 8 wr_addr [4:0] $end
     $var wire 32 C wr_data [31:0] $end
     $var wire  1 9 wr_en $end
     $scope module rfile $end
      $var wire 32 0! c_addr_nbits [31:0] $end
      $var wire  1 } clk $end
      $var wire 32 +! p_data_nbits [31:0] $end
      $var wire 32 +! p_num_entries [31:0] $end
      $var wire  5 L read_addr0 [4:0] $end
      $var wire  5 M read_addr1 [4:0] $end
      $var wire 32 [ read_data0 [31:0] $end
      $var wire 32 \ read_data1 [31:0] $end
      $var wire  1 # reset $end
      $var wire 32 ] rfile[0] [31:0] $end
      $var wire 32 g rfile[10] [31:0] $end
      $var wire 32 h rfile[11] [31:0] $end
      $var wire 32 i rfile[12] [31:0] $end
      $var wire 32 j rfile[13] [31:0] $end
      $var wire 32 k rfile[14] [31:0] $end
      $var wire 32 l rfile[15] [31:0] $end
      $var wire 32 m rfile[16] [31:0] $end
      $var wire 32 n rfile[17] [31:0] $end
      $var wire 32 o rfile[18] [31:0] $end
      $var wire 32 p rfile[19] [31:0] $end
      $var wire 32 ^ rfile[1] [31:0] $end
      $var wire 32 q rfile[20] [31:0] $end
      $var wire 32 r rfile[21] [31:0] $end
      $var wire 32 s rfile[22] [31:0] $end
      $var wire 32 t rfile[23] [31:0] $end
      $var wire 32 u rfile[24] [31:0] $end
      $var wire 32 v rfile[25] [31:0] $end
      $var wire 32 w rfile[26] [31:0] $end
      $var wire 32 x rfile[27] [31:0] $end
      $var wire 32 y rfile[28] [31:0] $end
      $var wire 32 z rfile[29] [31:0] $end
      $var wire 32 _ rfile[2] [31:0] $end
      $var wire 32 { rfile[30] [31:0] $end
      $var wire 32 | rfile[31] [31:0] $end
      $var wire 32 ` rfile[3] [31:0] $end
      $var wire 32 a rfile[4] [31:0] $end
      $var wire 32 b rfile[5] [31:0] $end
      $var wire 32 c rfile[6] [31:0] $end
      $var wire 32 d rfile[7] [31:0] $end
      $var wire 32 e rfile[8] [31:0] $end
      $var wire 32 f rfile[9] [31:0] $end
      $var wire  5 8 write_addr [4:0] $end
      $var wire 32 C write_data [31:0] $end
      $var wire  1 9 write_en $end
     $upscope $end
    $upscope $end
    $scope module stats_en_reg_W $end
     $var wire  1 } clk $end
     $var wire 32 C d [31:0] $end
     $var wire  1 : en $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire 32 *! p_reset_value [31:0] $end
     $var wire 32 U q [31:0] $end
     $var wire  1 # reset $end
    $upscope $end
    $scope module wb_result_reg_W $end
     $var wire  1 } clk $end
     $var wire 32 B d [31:0] $end
     $var wire  1 7 en $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire 32 *! p_reset_value [31:0] $end
     $var wire 32 C q [31:0] $end
     $var wire  1 # reset $end
    $upscope $end
    $scope module wb_result_sel_mux_M $end
     $var wire 32 T in0 [31:0] $end
     $var wire 32 & in1 [31:0] $end
     $var wire 32 B out [31:0] $end
     $var wire 32 +! p_nbits [31:0] $end
     $var wire  1 6 sel $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
1#
b00000000000000011011110101011011011111011101111 $
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
0(
1)
b00 *
1+
0,
b00 -
b00 .
b000 /
00
11
b0000 2
b00 3
04
15
06
17
b00000 8
09
0:
b00000000000000000000000000000000 ;
b11011110101011011011111011101111 <
b00000000000000000000000000000100 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
1E
0F
b00000000000000000000000000000000 G
b00000000000000000000000000000100 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000 K
b00000 L
b00000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000100 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
0V
0W
b0000000 X
b000 Y
b000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
1}
0~
b00000000000000000000000000000000 !!
0"!
b00000000000000000000000000000000 #!
0$!
0%!
0&!
0'!
b00000000000000000000000000000001 (!
b00000000000000000000001000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000100000 +!
b0000000 ,!
b00000000000000000000000000000100 -!
0.!
b00000000000000000000000111111100 /!
b00000000000000000000000000000101 0!
#2
0}
#3
b00000000000000000000001000000000 =
b00000000000000000000000111111100 G
b00000000000000000000001000000000 H
1}
#4
0}
#5
1}
#6
0}
#7
1}
#8
0}
#9
1}
#10
0}
#11
1}
#12
0#
0}
#13
b00000000000000000000001000000100 =
b11111111111111111111111111100110 ?
b11111111111111111111110111101010 @
b11011110101011011011111011101111 D
b00000000000000000000001000000000 G
b00000000000000000000001000000100 H
b00000000000000000000000111111100 J
b11101 K
b11011 L
b01010 M
b1101111 X
b011 Y
b110111101010 Z
1}
#14
0}
#15
b00000000000000000000001000001000 =
b11111111111111111111111111101010 ?
b00000000000000000000001000000100 G
b00000000000000000000001000001000 H
b11111111111111111111111111100110 I
b00000000000000000000001000000000 J
b00000000000000000000000111111100 P
b00000000000000000000001000000000 Q
1}
#16
0}
#17
b00000000000000000000001000001100 =
b11111111111111111111111111101110 ?
b00000000000000000000001000001000 G
b00000000000000000000001000001100 H
b11111111111111111111111111101010 I
b00000000000000000000001000000100 J
b00000000000000000000001000000000 P
b00000000000000000000001000000100 Q
1}
#18
b10 *
b100 /
b11111111111111011011011111101110 =
b11111111111111011011011111101110 ?
b11111111111111011011010111101010 @
0}
#19
b11111111111111011011011111110010 =
b11111111111111011011011111110010 ?
b11111111111111011011011111101110 G
b11111111111111011011011111110010 H
b11111111111111011011011111101110 I
b00000000000000000000001000001000 J
b00000000000000000000001000000100 P
b00000000000000000000001000001000 Q
1}
#20
0}
#21
b11111111111110110110110111011000 =
b11111111111110110110110111011000 ?
b11111111111111011011011111110010 G
b11111111111111011011011111110110 H
b11111111111111011011011111110010 I
b11111111111111011011011111101110 J
b00000000000000000000001000001000 P
b00000000000000000000001000001100 Q
1}
1"!
#22
0}
#23
b11111111111110110110110111011100 =
b11111111111110110110110111011100 ?
b11111111111110110110110111011000 G
b11111111111110110110110111011100 H
b11111111111110110110110111011000 I
b11111111111111011011011111110010 J
b11111111111111011011011111101110 P
b11111111111111011011011111110010 Q
1}
#24
0}
#25
b11111111111110010010001111000010 =
b11111111111110010010001111000010 ?
b11111111111110110110110111011100 G
b11111111111110110110110111100000 H
b11111111111110110110110111011100 I
b11111111111110110110110111011000 J
b11111111111111011011011111110010 P
b11111111111111011011011111110110 Q
1}
#26
0}
#27
b11111111111110010010001111000110 =
b11111111111110010010001111000110 ?
b11111111111110010010001111000010 G
b11111111111110010010001111000110 H
b11111111111110010010001111000010 I
b11111111111110110110110111011100 J
b11111111111110110110110111011000 P
b11111111111110110110110111011100 Q
1}
#28
0}
#29
b11111111111101101101100110101100 =
b11111111111101101101100110101100 ?
b11111111111110010010001111000110 G
b11111111111110010010001111001010 H
b11111111111110010010001111000110 I
b11111111111110010010001111000010 J
b11111111111110110110110111011100 P
b11111111111110110110110111100000 Q
1}
#30
0}
#31
b11111111111101101101100110110000 =
b11111111111101101101100110110000 ?
b11111111111101101101100110101100 G
b11111111111101101101100110110000 H
b11111111111101101101100110101100 I
b11111111111110010010001111000110 J
b11111111111110010010001111000010 P
b11111111111110010010001111000110 Q
1}
#32
1#
b00000000000000000000000000100001000000100010011 $
b00 *
b000 /
b00000000000100001000000100010011 <
b11111111111110010010000110110000 ?
b11111111111111111111110111101010 @
0}
#33
b00000000000000000000001000000000 =
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 D
b00000000000000000000000111111100 G
b00000000000000000000001000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000 K
b00000 L
b00000 M
b00000000000000000000000000000000 P
b00000000000000000000000000000100 Q
b0000000 X
b000 Y
b000000000000 Z
1}
0"!
#34
0}
#35
1}
#36
0}
#37
1}
#38
0}
#39
1}
#40
0}
#41
1}
#42
0}
#43
1}
#44
0#
0}
#45
b00000000000000000000001000000100 =
b00000000000000000000000111111101 ?
b00000000000000000000000000000001 @
b00000000000100001000000100010011 D
b00000000000000000000001000000000 G
b00000000000000000000001000000100 H
b00000000000000000000000111111100 J
b00010 K
b00001 L
b00001 M
b0010011 X
b000000000001 Z
1}
#46
0}
#47
b00000000000000000000001000001000 =
b00000000000000000000001000000001 ?
b00000000000000000000001000000100 G
b00000000000000000000001000001000 H
b00000000000000000000000111111101 I
b00000000000000000000001000000000 J
b00000000000000000000000111111100 P
b00000000000000000000001000000000 Q
1}
#48
0}
#49
b00000000000000000000001000001100 =
b00000000000000000000001000000101 ?
b00000000000000000000001000001000 G
b00000000000000000000001000001100 H
b00000000000000000000001000000001 I
b00000000000000000000001000000100 J
b00000000000000000000001000000000 P
b00000000000000000000001000000100 Q
1}
#50
0}
#51
b00000000000000000000001000010000 =
b00000000000000000000001000001001 ?
b00000000000000000000001000001100 G
b00000000000000000000001000010000 H
b00000000000000000000001000000101 I
b00000000000000000000001000001000 J
b00000000000000000000001000000100 P
b00000000000000000000001000001000 Q
1}
#52
0}
